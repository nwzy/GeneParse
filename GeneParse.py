import re
import shutil
import os
import subprocess
import sys

import pandas as pd


class GeneParse:
    """
    GeneParse parses the output files /cnv_pca for genes of interest
    While the script is able to return all files that contain the gene of
    interest, it will only handle the writing a new file for the following
    files:

        1) amplicon_data.txt
        2) CN_Segments.vcf
        3) gene_cn.txt

    In general, the simplest use example use to generate a filtered list of
    files that contain only the genes of interest:

        geneparse_object = GeneParse('GENE', '/directory/with/cnv_pca/output')
        geneparse_object.write_gene_only_file()

    With GeneParse in the same folder as when parsing was called, one may remove
    the output folders generated by geneparse, you may call the
    GeneParse.remove_output_folder() method:

        geneparse_object.remove_output_folder()

    Thanks,
    NW
    """

    def __init__(self, gene, directory):
        """
        Possible improvements:
            1) Enforce the inputs so that gene is always a string
            2) Enforce directory is a real path by failing early and fast
        """
        self.gene = gene
        self.directory = directory
        self.cnv_folders = []
        self.bams_list = []
        self.root = ''
        self.sampleid_df = pd.DataFrame()
        self.amplicon_data_df = pd.DataFrame()
        self.main_df = pd.DataFrame()

        for root, dirs, files in os.walk(self.directory):
            # self.root = root
            # self.dirs = dirs
            # self.files = files
            self.root = root
            for dir in dirs:
                if 'cnv_output_master' in dir:
                    self.cnv_folders.append(os.path.join(self.root, dir))
            for file in files:
                # if file.endswith('bam') and os.path.isfile(os.path.join(self.root, file)):
                # print(file)
                if file.endswith('bam'):
                    self.bams_list.append(os.path.join(self.root, file))

    def view_input(self):
        """
        Reviews the inputs as a sanity check
        """
        print(self.gene, self.directory, self.cnv_folders, self.bams_list)

    def get_files(self):
        """
        From the folder list generated by the get_folders() method, collect the
        list of files within the directories for further processing (returns a
        list)
        """
        files = []
        for folder in self.cnv_folders:
            for file in os.listdir(folder):
                if not os.path.isfile(os.path.join(folder, file)):
                    continue
                else:
                    files.append(os.path.join(folder, file))
        return files

    def check_file_for_gene(self, file):
        """
        Looks through a file to check if the gene of interest exists within the
        file before further processing (returns a bool)
        """
        file_to_check = file
        with open(file_to_check, 'r') as in_file:
    	    for line in in_file:
                if line.find(self.gene):
                    return True
    	        else:
    	      	    return False

    def find_files_with_gene(self):
        """
        Finds all files that contain an instance of the gene of interest (returns
        a list)
        """
        list_of_files = self.get_files()
        filtered_list_of_files = []
        for file in list_of_files:
            line_with_gene = []
		try:
		    with open(file, 'r') as in_file:
			for line in in_file:
			    if not self.gene in line:
				continue
			    else:
				line_with_gene.append(line)
			if not line_with_gene:
			    continue
			else:
			    filtered_list_of_files.append(file)
		except:
			continue
        return filtered_list_of_files

    def write_gene_only_file(self):
        """
        Creates a new file in a new output folder with the format

            /{gene_name}_output

        in the directory provided for the gene of interest for these files:
            1) amplicon_data.txt
            2) CN_Segments.vcf
            3) gene_cn.txt
        """
        filtered_list_of_files = self.find_files_with_gene()
        gene_name = "{}_output".format(self.gene)

        def amplicon_data_parse(file):
            if "amplicon_data.txt" in file:
                with open(file, 'r') as old_file:
                    header = old_file.readline()
                    with open('{}/{}'.format(new_output_folder, os.path.basename(file)), 'w+') as new_file:
                        new_file.write(header)
                        for line in old_file:
                             self.gene in line:
                                new_file.write(line)

        def cn_segments_parse(file):
            if "CN_Segments.vcf" in file:
                with open(file, 'r') as old_file:
                    lines_to_write = []
                    for line in old_file:
                        if '#' in line:
                            lines_to_write.append(line)
                        elif '##' in line:
                            lines_to_write.append(line)
                        elif self.gene in line:
                            lines_to_write.append(line)
                    with open('{}/{}'.format(new_output_folder, os.path.basename(file)), 'w+') as new_file:
                        for line in lines_to_write:
                            new_file.write(line)

        def gene_cn_parse(file):
            if "gene_cn.txt" in file:
                with open(file, 'r') as old_file:
                    lines_to_write = []
                    for line in old_file:
                        if '#' in line:
                            lines_to_write.append(line)
                        elif 'cn.target.gene' in line:
                            lines_to_write.append(line)
                        elif self.gene in line:
                            lines_to_write.append(line)
                    with open('{}/{}'.format(new_output_folder, os.path.basename(file)), 'w+') as new_file:
                        for line in lines_to_write:
                            new_file.write(line)

        for folder in self.cnv_folders:
            new_output_folder = os.path.join(folder, gene_name)
            try:
		os.mkdir(new_output_folder)
	    except:
		print("{} already exists, continuing".format(new_output_folder)
            for file in filtered_list_of_files:
                try:
                    amplicon_data_parse(file)
                    cn_segments_parse(file)
                    gene_cn_parse(file)
                except OSError:
                    print("Files already exist")

    def remove_output_folder(self):
        """
        Indiscriminantly removes all folders and its contents that match the
        output folder format for the gene of interest
        """
        # cnv_folders = self.get_folders()
        gene_name="{}_output".format(self.gene)
        folders_to_remove=[]
        for folder in self.cnv_folders:
            for root, dirs, files in os.walk(folder):
                # print("gene_name: {}\nparent: {}\ndirs: {}".format(gene_name, folder, dirs))
                for dir in dirs:
                    if dir == gene_name:
                        folders_to_remove.append(os.path.join(root, dir))
        for folder in folders_to_remove:
            try:
                # os.rmdir(folder)
                shutil.rmtree(folder)
            except OSError:
                continue
                # print("No folders matching output folder: {}".format(gene_name))

    def make_sampleid_df(self):
        """
        Make pandas table with sample_id and amplicon_id
        """
        current_dir=os.getcwd()
        save_path=os.path.join(current_dir, self.directory)

        def make_sample_id():
            """
            Makes a table of bam name and sample_id. Requires the shell script
            "get_sampleid.sh"
            """
            with open('{}/get_sampleid.sh'.format(save_path), 'w+') as sh:
                sh.write('''\
                #!/usr/bin/env bash

                GetSampleID () {
                  for f in $(find $1 -type f -name "*.bam")
                  do
                    samtools view -H $f | grep SM | sed 's/^.*SM://' | echo -e "${f##*/}\t$(head -1)"
                  done
                }

                GetSampleID
                ''')

        def run_sample_id():
            with open('{}/sample_id.txt'.format(save_path), 'w+') as out:
                subprocess.call(['bash', 'get_sampleid.sh', self.directory],
                                cwd=self.directory, stdout=out, stdin=out, stderr=out)

        def split_text(input):
            first, last=input.split('.')
            return first

        make_sample_id()
        run_sample_id()

        sampleid_path=os.path.join(self.directory, 'sample_id.txt')

        df=pd.read_csv(sampleid_path, sep='\t', header=None,
                       names=['bam', 'sample_id'])
        df=df.sort_values(by=['bam'])
        df=df.reset_index(drop=True)
        df['bam']=df['bam'].apply(lambda input: split_text(input))
        # self.sampleid_df = df
        # return self.sampleid_df
        return df

    def make_amplicon_data_df(self):
        temp_df=pd.DataFrame()
        for file in self.find_files_with_gene():
            if 'amplicon_data.txt' in file:
                df=pd.read_csv(file, sep='\t')
                df=amplicon_data_df=df[df.gene == self.gene]
                df=df.reset_index(drop=True)
                df['bam']=os.path.basename(os.path.dirname(file))
                # temp_df = df
                # self.amplicon_data_df = self.amplicon_data_df.append(temp_df, ignore_index=True)
                temp_df=temp_df.append(df, ignore_index=True)
        return temp_df

    def filter_sample_id(self):
        sample_list=[]
        barcode_list=[]
        amp_df=self.make_amplicon_data_df()
        samp_df=self.make_sampleid_df()
        for index_a, row_a in amp_df.iterrows():
            for index_s, row_s in samp_df.iterrows():
                if row_s['bam'] in row_a['bam']:
                    sample_list.append(row_s['sample_id'])
                    barcode_list.append(row_s['bam'])
        return barcode_list, sample_list

    def master_df(self):
        amp_df=self.make_amplicon_data_df()
        amp_df=amp_df.loc[0:, 'id':'outlier']
        barcode_list, sample_list=self.filter_sample_id()
        samp_df=pd.DataFrame()
        # samp_df = samp_df.assign(sample_id=self.filter_sample_id())
        samp_df=samp_df.assign(barcode_id=barcode_list, sample_id=sample_list)
        # self.main_df = self.main_df.concat(amp_df.loc[0:, 'id':'outlier'])
        self.main_df=pd.concat([samp_df, amp_df], axis=1, sort=False)
        return self.main_df

    def output_master_df(self):
        output_file='{}_{}_output.txt'.format(self.gene, self.directory)
        with open(output_file, 'w+') as f:
            f.write(self.master_df().to_csv(sep='\t', index=False))

